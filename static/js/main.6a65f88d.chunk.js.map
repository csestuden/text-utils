{"version":3,"sources":["Components/Navbar.js","Components/Form.js","Components/About.js","Components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","htmlFor","Form","text","setText","useState","Fragment","style","color","heading","value","onChange","event","console","log","target","background","rows","handleUpclick","newText","toUpperCase","showAlert","handleLoclick","newtext","toLowerCase","handleClclick","split","length","About","myStyle","setmyStyle","backgroundColor","data-bs-parent","toEnable","defaultProps","Alerts","alert","class","role","word","lower","charAt","slice","capatilize","msg","App","setmode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6a65f88d.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button cla\r\n                        ssName=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n  };","import React,{useState} from 'react'\r\n \r\nexport default function Form(props) {\r\n\r\n\r\n\r\n    const handleUpclick=()=>{\r\n        console.log(\"uppercase was clicked\"+text);\r\n        // setText(\"you have clicked handleupclick\")\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"upppercase has been clicked\",\"success\")\r\n    }\r\n    const handleLoclick=()=>{\r\n      console.log(\"lowercase is clicked\"+text)\r\n      let newtext=text.toLowerCase();\r\n      setText(newtext);\r\n      props.showAlert(\"lowercase has been clicked\",\"success\");\r\n\r\n    }\r\n    const handleClclick=()=>{\r\n      // console.log(\"lowercase is clicked\"+text)\r\n      let newtext='';\r\n      setText(newtext);\r\n      props.showAlert(\"clear has been clicked\",\"success\");\r\n\r\n    }\r\n    //you have to declare this unless you \r\n    const handleOnchange=(event)=>{\r\n        console.log(\"on change\");\r\n        setText(event.target.value)\r\n    }\r\n    // Declare a new state variable, which we'll call \"count\"\r\n const [text, setText] = useState('Enter the text here');\r\n  return (\r\n    <>\r\n    <div className='conatiner' style={ {color:props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n  {/* <label for=\"my\" className=\"form-label\">Email address</label> */}\r\n  \r\n  <textarea className=\"form-control\" value={text} onChange={handleOnchange} style={{background:props.mode==='dark'?'grey':'white',color:props.mode==='white'?'black':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n</div>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleUpclick}>Click to uppercase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleLoclick}>click to lowercase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleClclick}>Clear Text</button>\r\n    </div>\r\n    <div className=\"container my-2\" style={ {color:props.mode==='dark'?'white':'black'}}>\r\n      <h1>Your text summary</h1>\r\n      <p>{text.split(\" \").length} words and {text.length} character</p>\r\n      <p>{0.008 *text.split(\" \").length} Minutes to read</p>\r\n    </div>\r\n\r\n    </>\r\n  )\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function About(props) {\r\n    const [myStyle,setmyStyle]=useState({\r\n        color:'white',\r\n        backgroundColor:'black'\r\n    })\r\n\r\n    const toEnable=()=>{\r\n        if(myStyle.color==='white'){\r\n            setmyStyle({\r\n                color:'black',\r\n        backgroundColor:'white'\r\n            })\r\n        }else{\r\n            setmyStyle({\r\n                color:'white',\r\n        backgroundColor:'black'\r\n            })\r\n        }\r\n    }\r\n  return (\r\n    \r\n    <div className='container' style={myStyle}>\r\n        <h1>{props.heading}</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\"  style={myStyle}>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\">\r\n      <button className=\"accordion-button\" type=\"button\"   style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\"  style={myStyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\"  style={myStyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\">\r\n      <button className=\"accordion-button collapsed\"  style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\"  style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div className=\"container\">\r\n<button type=\"button\" onClick={toEnable} className=\"btn btn-primary my-2\">Enable dark mode</button>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alerts(props) {\r\n   const capatilize=(word)=>{\r\n    const lower=word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase()+ lower.slice(1);\r\n\r\n\r\n   }\r\n  return (\r\n  props.alert &&   <div>\r\n     <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capatilize(props.alert.type)}</strong>:{props.alert.msg}\r\n  {/* <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alerts\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Form from './Components/Form';\nimport About from './Components/About';\nimport { useState } from 'react';\nimport Alerts from './Components/Alerts';\nimport React from \"react\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n// let name=\"harsh\";\nfunction App() {\n  const [mode,setmode]=useState('light');\n  \n  \n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(()=>{\nsetAlert(null);\n      },3000)\n    }\n\n  const toggleMode=()=>{\n    if(mode ==='light'){\n      setmode('dark');\n      document.body.style.backgroundColor='grey';\n      showAlert(\"dark mode has been enabled\",\"success\");\n    \n        document.title='TextUtils-Dark';\n    \n    }\n    else{\n      setmode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"light mode has been enabled\",\"success\");\n   \n        document.title='TextUtils-Light';\n   \n     \n    }\n  }\n  return (\n    <>\n  \n<Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n<Alerts alert={alert}/>\n\n<div className=\"container\">\n{/* <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n         \n          <Route path=\"/\">\n          <Form  showAlert={showAlert} heading=\"Enter your text!\" mode={mode}/>\n          </Route>\n        </Switch> */}\n         \n  <Form  showAlert={showAlert} heading=\"Enter your text!\" mode={mode}/>\n \n  <About heading='About'/>\n</div>\n\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}